{
  "_args": [
    [
      {
        "raw": "jest-serializer@^24.0.0",
        "scope": null,
        "escapedName": "jest-serializer",
        "name": "jest-serializer",
        "rawSpec": "^24.0.0",
        "spec": ">=24.0.0 <25.0.0",
        "type": "range"
      },
      "C:\\Users\\User\\helloworld\\node_modules\\jest-haste-map"
    ]
  ],
  "_from": "jest-serializer@^24.0.0",
  "_hasShrinkwrap": false,
  "_id": "jest-serializer@24.0.0",
  "_location": "/jest-serializer",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_24.0.0_1548428694503_0.9860371717949987"
  },
  "_npmUser": {
    "name": "rubennorte",
    "email": "rubennorte@gmail.com"
  },
  "_npmVersion": "lerna/3.10.5/node@v8.11.3+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-serializer@^24.0.0",
    "scope": null,
    "escapedName": "jest-serializer",
    "name": "jest-serializer",
    "rawSpec": "^24.0.0",
    "spec": ">=24.0.0 <25.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-haste-map",
    "/metro-core/jest-haste-map",
    "/metro/jest-haste-map"
  ],
  "_resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-24.0.0.tgz",
  "_shasum": "522c44a332cdd194d8c0531eb06a1ee5afb4256b",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@^24.0.0",
  "_where": "C:\\Users\\User\\helloworld\\node_modules\\jest-haste-map",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {},
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-9FKxQyrFgHtx3ozU+1a8v938ILBE7S8Ko3uiAVjT8Yfi2o91j/fj81jacCQZ/Ihjiff/VsUCXVgQ+iF1XdImOw==",
    "shasum": "522c44a332cdd194d8c0531eb06a1ee5afb4256b",
    "tarball": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-24.0.0.tgz",
    "fileCount": 4,
    "unpackedSize": 7679,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcSyWXCRA9TVsSAnZWagAAWJQP/RFcn+JWHJxC3PjAhJUs\nM+Rdq5qni0UnIadDzVFIwp98Dnzq8sTTmvv2+f/l/dQH3sh3jqzSIwIaBKzp\nZnyrZjdL5m5l42QBb7IayIPtp6QbOrC0Rhts1O0SdkGZ8kbE+HG122R5X0P3\nVpkd9rrELo4AvwSkHzSo0u6rE6zjW2TEu9MjoL5LhoLRi2VYDeblCTqCVUer\ngjjB+MlQP9XJ+coju5eXJx+33gUZjoTWHlRjX6W4UDvgpGWvRzPwcZDeuzro\ngZTJ1Hzt6VS6RNkDpv7RPImRfSASFoRFl0xrC0239/ZmL1lpf+e9lelkO/o5\nkEKHO18VdIHJZiEr3/TKSIaBjLJviKNT1u8+zmh7+KnftwtE8H4vJdr4uO8z\nipZb8jYAdCV7hJedpT+GZr5TOKgcZcC9dDtPNqvbMTTfIJrGySgYU4z7nkqj\n+OkVQWpEov8An0729aTArIQCYLftGtFarrDm+3rbwrkoOu4WlN1m3Q5ZXAyk\n2GTlRxRslCy2KfGzgBBh7UECiB+VVEHimJ2Ofau6l/cmA5sH9sNp72riAmLD\nnuW53A7tvGYkjw7SHKROhsTciJqF7wrJj0IfGSu9rDIjt4FCJT31inyQGKtj\nyepD1pbrwsCP+K6V3PuOptad7cvyaEIq0J4wPVRxO+3nm7d4/NqYllPGp0Ma\nSCIj\r\n=C70G\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6"
  },
  "gitHead": "634e5a54f46b2a62d1dc81a170562e6f4e55ad60",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "jeanlauliac",
      "email": "jean@lauliac.com"
    },
    {
      "name": "mjesun",
      "email": "mjesun@hotmail.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git",
    "directory": "packages/jest-serializer"
  },
  "version": "24.0.0"
}
